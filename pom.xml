<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>image</groupId>
    <artifactId>exifweb</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>exifweb</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--
            see https://mincong-h.github.io/2018/08/29/maven-compiler-plugin-understanding/
        -->
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>${maven.compiler.source}</maven.compiler.target>

        <!--
            see javac - - help
            see https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html
        -->
        <!--<maven.compiler.release>${maven.compiler.target}</maven.compiler.release>-->

        <!-- flags -->
        <run-tomcat-embedded>provided</run-tomcat-embedded>
        <run-jetty>provided</run-jetty>

        <!--
        https://docs.spring.io/spring/docs/4.3.13.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-environments
        Should be the same version for spring-instrument-tomcat-*.jar!
        -->
        <!--<springframework.version>4.3.14.RELEASE</springframework.version>-->
        <!--<spring-security.version>3.2.10.RELEASE</spring-security.version>-->
        <!--<spring-security.version>4.2.4.RELEASE</spring-security.version>-->
        <!--springframework.version>5.2.3.RELEASE</springframework.version>-->
        <!--spring-security.version>5.2.1.RELEASE</spring-security.version>-->
        <!--spring-data-releasetrain.version>Moore-SR4</spring-data-releasetrain.version>-->
        <spring-boot.version>2.2.4.RELEASE</spring-boot.version>
        <reactor-bom.version>Dysprosium-SR2</reactor-bom.version>

        <!-- various libraries versions -->
        <metadata-extractor.version>2.13.0</metadata-extractor.version>
        <commons-io.version>2.7</commons-io.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.18.10</lombok.version>

        <!-- plugins -->
        <lombok-maven-plugin.version>1.18.10.0</lombok-maven-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M4</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>3.0.0-M4</maven-failsafe-plugin.version>
        <maven-surefire-report-plugin.version>3.0.0-M4</maven-surefire-report-plugin.version>
        <maven-jxr-plugin.version>3.0.0</maven-jxr-plugin.version>
        <!--
        java8 won't work with version (2.5.1, 3.7.0]
        I guess it determines also the spring-instrument-tomcat version.
        -->
        <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
    </properties>

    <repositories>
        <!--<repository>-->
        <!--<id>projectlombok.org</id>-->
        <!--<url>https://projectlombok.org/edge-releases</url>-->
        <!--</repository>-->
        <repository>
            <id>central.maven.org</id>
            <url>http://central.maven.org/maven2/</url>
        </repository>
        <repository>
            <id>repo1.maven.org</id>
            <url>https://repo1.maven.org/maven2/</url>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>io.projectreactor</groupId>
                <artifactId>reactor-bom</artifactId>
                <version>${reactor-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--
                <dependency>
                    <groupId>org.springframework.data</groupId>
                    <artifactId>spring-data-releasetrain</artifactId>
                    <version>${spring-data-releasetrain}</version>
                    <scope>import</scope>
                    <type>pom</type>
                </dependency>
            -->

            <!-- BEGIN CURRENT PROJECT VERSIONS -->

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-entities</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>cdm</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>exifweb-messaging</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>util</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-api</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-impl-hbm</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-jpa2x-hbm-impl</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>photos</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>webapp</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>webapp</artifactId>
                <classifier>classes</classifier>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>util</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-entities</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-impl-hbm</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>storage-jpa2x-hbm-impl</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>image.exifweb</groupId>
                <artifactId>photos</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <!-- END CURRENT PROJECT VERSIONS -->

            <!-- BEGIN VARIOUS LIBRARIES VERSIONS -->

            <dependency>
                <groupId>com.rainerhahnekamp</groupId>
                <artifactId>sneakythrow</artifactId>
                <version>1.1.0</version>
            </dependency>

            <dependency>
                <groupId>subtitles</groupId>
                <artifactId>subtitles-extractor</artifactId>
                <version>1.0-SNAPSHOT</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-context</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>commons-io</groupId>
                        <artifactId>commons-io</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>

            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils</artifactId>
                <version>1.9.3</version>
            </dependency>

            <dependency>
                <groupId>com.jolbox</groupId>
                <artifactId>bonecp</artifactId>
                <version>0.8.0.RELEASE</version>
            </dependency>

            <dependency>
                <groupId>com.drewnoakes</groupId>
                <artifactId>metadata-extractor</artifactId>
                <version>${metadata-extractor.version}</version>
            </dependency>

            <dependency>
                <groupId>org.javassist</groupId>
                <artifactId>javassist</artifactId>
                <version>3.26.0-GA</version>
                <scope>runtime</scope>
            </dependency>

            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!-- END VARIOUS LIBRARIES VERSIONS -->

            <!-- BEGIN TEST LIBRARIES -->

            <!--
                https://mvnrepository.com/artifact/io.takari.junit/takari-cpsuite

                @RunWith(ClasspathSuite.class)
            -->
            <dependency>
                <groupId>io.takari.junit</groupId>
                <artifactId>takari-cpsuite</artifactId>
                <version>1.2.7</version>
                <scope>test</scope>
            </dependency>

            <!-- https://mvnrepository.com/artifact/net.sf.jexample/jexample -->
            <!--<dependency>-->
            <!--<groupId>net.sf.jexample</groupId>-->
            <!--<artifactId>jexample</artifactId>-->
            <!--<version>4.4-378</version>-->
            <!--</dependency>-->

            <!-- https://mvnrepository.com/artifact/net.jcip/jcip-annotations -->
            <dependency>
                <groupId>net.jcip</groupId>
                <artifactId>jcip-annotations</artifactId>
                <version>1.0</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.exparity</groupId>
                <artifactId>hamcrest-date</artifactId>
                <version>2.0.7</version>
                <scope>test</scope>
            </dependency>

            <!--
                https://glytching.github.io/junit-extensions/
            -->
            <dependency>
                <groupId>io.github.glytching</groupId>
                <artifactId>junit-extensions</artifactId>
                <version>2.3.0</version>
                <scope>test</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Only needed to run tests in a version of IntelliJ IDEA that bundles older versions -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.exparity</groupId>
            <artifactId>hamcrest-date</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.takari.junit</groupId>
            <artifactId>takari-cpsuite</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.jcip</groupId>
            <artifactId>jcip-annotations</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.glytching</groupId>
            <artifactId>junit-extensions</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!--
            https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
        -->
        <directory>/tmp/target-${project.groupId}-${project.artifactId}</directory>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <fork>true</fork>
                        <meminitial>256m</meminitial>
                        <maxmem>1024m</maxmem>
                        <compilerArgs>
                            <!--
                                https://maven.apache.org/plugins/maven-compiler-plugin/examples/pass-compiler-arguments.html

                                https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html
                                To store formal parameter names in a particular .class file, and thus enable the Reflection API to retrieve formal parameter names, compile the source file with the -parameters option to the javac compiler.

                                https://docs.oracle.com/javase/10/tools/javac.htm#JSWOR627
                                javac -J option
                                    Passes option to the runtime system, where option is one of the Java options described on javacommand. 
                                    For example, -J-Xms48m sets the startup memory to 48 MB.
                            -->
                            <arg>-parameters</arg>
                        </compilerArgs>
                        <!--
                            https://github.com/rzwitserloot/lombok/issues/1723
                        -->
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.2</version>
                    <configuration>
                        <attachClasses>true</attachClasses>
                        <!--<useCache>true</useCache>-->
                        <!--<archive>-->
                        <!--<index>true</index>-->
                        <!--<manifest>-->
                        <!--<addClasspath>true</addClasspath>-->
                        <!--</manifest>-->
                        <!--</archive>-->
                    </configuration>
                </plugin>

                <!--<plugin>-->
                <!--<groupId>org.projectlombok</groupId>-->
                <!--<artifactId>lombok-maven-plugin</artifactId>-->
                <!--<version>${lombok-maven-plugin.version}</version>-->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>delombok</id>-->
                <!--<phase>generate-sources</phase>-->
                <!--<goals>-->
                <!--<goal>delombok</goal>-->
                <!--</goals>-->
                <!--<configuration>-->
                <!--<addOutputDirectory>false</addOutputDirectory>-->
                <!--<sourceDirectory>src/main/java</sourceDirectory>-->
                <!--</configuration>-->
                <!--</execution>-->
                <!--<execution>-->
                <!--<id>test-delombok</id>-->
                <!--<phase>generate-test-sources</phase>-->
                <!--<goals>-->
                <!--<goal>testDelombok</goal>-->
                <!--</goals>-->
                <!--<configuration>-->
                <!--<addOutputDirectory>false</addOutputDirectory>-->
                <!--<sourceDirectory>src/test/java</sourceDirectory>-->
                <!--</configuration>-->
                <!--</execution>-->
                <!--</executions>-->
                <!--</plugin>-->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.1.2</version>
                    <executions>
                        <execution>
                            <goals>
                                <!--
                                    Generated only after running tests!
                                -->
                                <goal>test-jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven-failsafe-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <skipAfterFailureCount>1</skipAfterFailureCount>
                        <!--                        <argLine>-Xmx512m -XX:MetaspaceSize=256m</argLine>-->
                        <forkCount>1C</forkCount>
                        <reuseForks>false</reuseForks>
                        <disableXmlReport>false</disableXmlReport>
                        <!--<argLine>-Dspring.profiles.active=jdbc-ds</argLine>-->
                        <environmentVariables>
                            <!-- for catching tests without proper spring profile annotation -->
                            <spring.profiles.active>fake-profile</spring.profiles.active>
                        </environmentVariables>
                        <!--<groups>controller</groups>-->
                    </configuration>
                </plugin>

                <plugin>
                    <!--
                        see https://issues.apache.org/jira/browse/SUREFIRE-1534
                        for <artifactId>storage-jpa2x-hbm-impl</artifactId> usage
                    -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <!-- combine.children="merge" is the default -->
                    <configuration>
                        <skipAfterFailureCount>1</skipAfterFailureCount>
                        <!--                        <argLine>-Xmx512m -XX:MetaspaceSize=256m</argLine>-->
                        <!--
                            https://stackoverflow.com/questions/26882936/why-does-springjunit4classrunner-not-work-with-surefire-parallel-methods
                            parallel=methods -> ApplicationContext fails with this multithreaded environment

                            http://maven.apache.org/surefire-archives/maven-surefire-2.15/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html
                            As reuseForks=false creates a new JVM process for each
                            test class, using parallel=classes would have no effect.
                        -->
                        <!--<parallel>classes</parallel>-->
                        <!--<threadCount>4</threadCount>-->

                        <!--
                            http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html

                            @NotThreadSafe:
                            Since of maven-surefire-plugin:2.18, you can apply the JCIP annotation @net.jcip.annotations.NotThreadSafe on the Java class of JUnit test (pure test class, Suite, Parameterized, etc.) in order to execute it in single Thread instance. The Thread has name maven-surefire-plugin@NotThreadSafe and it is executed at the end of the test run.

                            methods – runs test methods in separate threads
                            classes – runs test classes in separate threads
                            classesAndMethods – runs classes and methods in separate threads
                            suites – runs suites in parallel
                            suitesAndClasses – runs suites and classes in separate threads
                            suitesAndMethods – creates separate threads for classes and for methods
                            all – runs suites, classes as well as methods in separate threads

                            <parallel/> makes no sense when also using <forkCount>1C</forkCount>
                        -->
                        <!--<parallel>methods</parallel>-->
                        <!--<threadCount>1</threadCount>-->
                        <!--<perCoreThreadCount>true</perCoreThreadCount>-->

                        <!--
                            see tech.log: multiple similar but different ApplicationContext in same JVM

                            http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html
                            reuseForks is used to define whether to terminate the spawned process after one test class and to create a new process for the next test

                            In order to avoid JVM fork when testing I have to run separately in-memory, stage and production tests.
	                        When at least two of them run together the spring configuration overlaps and random errors occur.

                            ehcache static instance is overridden when using stage and production same time so we
                            need forked tests when running stage and production tests in same mvn test command

	                        It supports the same syntax as -T in maven-core: if you terminate the value with a 'C',
	                        that value will be multiplied with the number of available CPU cores in your system.
                        -->
                        <forkCount>1C</forkCount>
                        <!--
                            2019.05.04: it's possible to work with reuseForks = true but the tests must be
                                        prepared for this parallelism (especially those working with the DB)
                            2019.06.01: ehcache won't work with reuseForks=true!
                                        net.sf.ehcache.CacheException: Another CacheManager with
                                        same name 'in-memory' already exists in the same VM.
                        -->
                        <reuseForks>false</reuseForks>
                        <!--
                            maven-surefire-report-plugin needs false value
                        -->
                        <disableXmlReport>false</disableXmlReport>
                        <!--<argLine>-Dspring.profiles.active=jdbc-ds</argLine>-->
                        <environmentVariables>
                            <!-- for catching tests without proper spring profile annotation -->
                            <spring.profiles.active>fake-profile</spring.profiles.active>
                        </environmentVariables>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                    <version>${maven-surefire-report-plugin.version}</version>
                    <configuration>
                        <aggregate>true</aggregate>
                        <alwaysGenerateSurefireReport>false</alwaysGenerateSurefireReport>
                        <showSuccess>true</showSuccess>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jxr-plugin</artifactId>
                    <version>${maven-jxr-plugin.version}</version>
                </plugin>

                <!--
                    http://tomcat.apache.org/maven-plugin-2.2/
                -->
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.2</version>
                    <configuration>
                        <url>http://127.0.0.1:8080/manager</url>
                        <server>TomcatServer</server>
                        <path>/${project.build.finalName}</path>
                    </configuration>
                </plugin>

                <!--
                    ERROR
                        EnhancementException: Unable to enhance persistent attribute [image.exifweb.systemtem.persistence.entities.Album:cover]
                        Caused by: javassist.NotFoundException: image.exifweb.systemtem.persistence.entities.Image
                    PROBLEM?
                        Album depends on Image which depends on Album

                    https://docs.jboss.org/hibernate/orm/5.0/topical/html/bytecode/BytecodeEnhancement.html#_build_time_enhancement

                    https://vladmihalcea.com/how-to-enable-bytecode-enhancement-dirty-checking-in-hibernate/
                    While the unidirectional @OneToOne association can be fetched lazily, the parent-side of a bidirectional @OneToOne association is not. Even when specifying that the association is not optional and we have the FetchType.LAZY, the parent-side association behaves like a FetchType.EAGER relationship.
                <plugin>
                    <groupId>org.hibernate.orm.tooling</groupId>
                    <artifactId>hibernate-enhance-maven-plugin</artifactId>
                    <version>${hibernate.version}</version>
                    <dependencies>
                        <!- -
                        version determined by jackson-datatype-hibernate4.version

                        see mvn dependency:tree | grep -B3 jackson
                        - ->
                        <dependency>
                            <groupId>com.fasterxml.jackson.core</groupId>
                            <artifactId>jackson-annotations</artifactId>
                            <version>${jackson-annotations.version}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <configuration>
                                <!- -<dir>${project.build.outputDirectory}</dir>- ->
                                <failOnError>true</failOnError>
                                <enableLazyInitialization>true</enableLazyInitialization>
                                <enableDirtyTracking>true</enableDirtyTracking>
                                <enableAssociationManagement>true</enableAssociationManagement>
                                <enableExtendedEnhancement>false</enableExtendedEnhancement>
                            </configuration>
                            <goals>
                                <goal>enhance</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                -->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <!--
                    order matters: put this after hibernate-enhance-maven-plugin

                    https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
                    multiple goals bound to a phase are executed in the same order as they are declared in the POM
                -->
                <!--<plugin>-->
                <!--<groupId>org.codehaus.mojo</groupId>-->
                <!--<artifactId>aspectj-maven-plugin</artifactId>-->
                <!--<version>${aspectj-maven-plugin.version}</version>-->
                <!--<configuration>-->
                <!--<verbose>false</verbose>-->
                <!--<showWeaveInfo>false</showWeaveInfo>-->
                <!--<privateScope>true</privateScope>-->
                <!--<source>${maven.compiler.source}</source>-->
                <!--<target>${maven.compiler.target}</target>-->
                <!--<complianceLevel>${maven.compiler.source}</complianceLevel>-->
                <!--</configuration>-->
                <!--<executions>-->
                <!--<execution>-->
                <!--<phase>process-sources</phase>-->
                <!--<goals>-->
                <!--<goal>compile</goal>-->
                <!--<goal>test-compile</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
                <!--</plugin>-->
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
            <!--<plugin>-->
            <!--<groupId>org.projectlombok</groupId>-->
            <!--<artifactId>lombok-maven-plugin</artifactId>-->
            <!--</plugin>-->
        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <!--testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources-->
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <!--
                    https://stackoverflow.com/questions/23653625/how-to-integrate-maven-surefire-report-plugin-into-maven-site-plugin-using-repor?answertab=active#tab-top
                -->
                <reportSets>
                    <reportSet>
                        <id>integration-tests</id>
                        <reports>
                            <report>failsafe-report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>windows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <forkCount>1</forkCount>
            </properties>
        </profile>
        <profile>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <!--
                in-memory only tests using in-memory DB
                Requires <forkCount> usage!
            -->
            <id>db-off</id>
            <properties>
                <!--
                    org.junit.Test.class means "no category"
                -->
                <junit4.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmInMemoryDbConfig.class
                </junit4.storage-impl-hbm.groups>
                <junit4.photos.groups>
                    image.photostests.junit4.misc.MiscTestCategory.class,
                    image.photos.JsonMapperConfig.class,
                    image.photostests.junit4.testconfig.PhotosInMemoryDbConfig.class
                </junit4.photos.groups>
                <junit5.storage-entities.groups>junit5</junit5.storage-entities.groups>
                <junit5.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmInMemoryDbConfig,
                    junit5&amp;hbm&amp;inmemorydb
                </junit5.storage-impl-hbm.groups>
                <junit5.storage-jpa2x-hbm-impl.groups>
                    junit5&amp;jpa2x&amp;inmemorydb
                </junit5.storage-jpa2x-hbm-impl.groups>
                <junit5.photos.groups>
                    image.photostests.junit4.misc.MiscTestCategory,
                    image.photos.JsonMapperConfig,
                    image.photostests.junit4.testconfig.PhotosInMemoryDbConfig,
                    junit5&amp;photos&amp;inmemorydb,
                    junit5&amp;photos&amp;misc
                </junit5.photos.groups>
                <junit5.webapp.groups>inmemorydb&amp;!controller</junit5.webapp.groups>
            </properties>
        </profile>
        <profile>
            <!--
                in-memory, staging and production tests using on disk DB (stage/production database)
                Requires <forkCount> usage!
            -->
            <id>db-on</id>
            <properties>
                <junit4.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmInMemoryDbConfig.class,
                    image.hbm.repository.springconfig.HbmStageJdbcDbConfig.class,
                    image.hbm.repository.springconfig.HbmProdJdbcDbConfig.class
                </junit4.storage-impl-hbm.groups>
                <junit4.photos.groups>
                    image.photostests.junit4.misc.MiscTestCategory.class,
                    image.photos.JsonMapperConfig.class,
                    image.photostests.junit4.testconfig.PhotosInMemoryDbConfig.class,
                    image.photostests.junit4.testconfig.PhotosStageJdbcDbConfig.class,
                    image.photostests.junit4.testconfig.PhotosProdJdbcDbConfig.class
                </junit4.photos.groups>
                <junit5.storage-entities.groups>junit5</junit5.storage-entities.groups>
                <junit5.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmInMemoryDbConfig,
                    image.hbm.repository.springconfig.HbmStageJdbcDbConfig,
                    image.hbm.repository.springconfig.HbmProdJdbcDbConfig,
                    junit5&amp;hbm&amp;inmemorydb,
                    junit5&amp;hbm&amp;staging,
                    junit5&amp;hbm&amp;production,
                    junit5&amp;hbm&amp;misc
                </junit5.storage-impl-hbm.groups>
                <junit5.storage-jpa2x-hbm-impl.groups>
                    junit5&amp;jpa2x&amp;inmemorydb,
                    junit5&amp;jpa2x&amp;staging,
                    junit5&amp;jpa2x&amp;production,
                    junit5&amp;jpa2x&amp;misc
                </junit5.storage-jpa2x-hbm-impl.groups>
                <junit5.photos.groups>
                    image.photostests.junit4.misc.MiscTestCategory,
                    image.photos.JsonMapperConfig,
                    image.photostests.junit4.testconfig.PhotosInMemoryDbConfig,
                    image.photostests.junit4.testconfig.PhotosStageJdbcDbConfig,
                    image.photostests.junit4.testconfig.PhotosProdJdbcDbConfig,
                    junit5&amp;photos&amp;inmemorydb,
                    junit5&amp;photos&amp;staging,
                    junit5&amp;photos&amp;production,
                    junit5&amp;photos&amp;misc
                </junit5.photos.groups>
                <junit5.webapp.groups>!controller</junit5.webapp.groups>
            </properties>
        </profile>
        <profile>
            <id>staging-only</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <!--
                                ERROR
                                    ExecutionException The forked VM terminated without properly saying goodbye.
                                    VM crash or System.exit called?
                                SOLUTION
                                    <reuseForks>false</reuseForks>

                                2019.05.04: reuseForks set true but might fail because of ehcache or spring ApplicationContext
                                2019.05.04: it's possible to work with reuseForks = true but the tests must be
                                            prepared for this parallelism (especially those working with the DB)
                                2019.06.01: ehcache won't work with reuseForks=true!
                                            net.sf.ehcache.CacheException: Another CacheManager with
                                            same name 'in-memory' already exists in the same VM.
                            -->
                            <reuseForks>true</reuseForks>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <junit4.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmStageJdbcDbConfig.class
                </junit4.storage-impl-hbm.groups>
                <junit4.photos.groups>
                    image.photostests.junit4.testconfig.PhotosStageJdbcDbConfig.class
                </junit4.photos.groups>
                <junit5.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmStageJdbcDbConfig,
                    junit5&amp;hbm&amp;staging
                </junit5.storage-impl-hbm.groups>
                <junit5.storage-jpa2x-hbm-impl.groups>
                    junit5&amp;jpa2x&amp;staging
                </junit5.storage-jpa2x-hbm-impl.groups>
                <junit5.photos.groups>
                    image.photostests.junit4.testconfig.PhotosStageJdbcDbConfig,
                    junit5&amp;photos&amp;staging
                </junit5.photos.groups>
                <junit5.webapp.groups>
                    root&amp;junit5&amp;staging,
                    webapp&amp;junit5&amp;staging
                </junit5.webapp.groups>
            </properties>
        </profile>
        <profile>
            <id>production-only</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <!--
                                ERROR
                                    ExecutionException The forked VM terminated without properly saying goodbye.
                                    VM crash or System.exit called?
                                SOLUTION
                                    <reuseForks>false</reuseForks>

                                2019.05.04: reuseForks set true but might fail because of ehcache or spring ApplicationContext
                                2019.05.04: it's possible to work with reuseForks = true but the tests must be
                                            prepared for this parallelism (especially those working with the DB)
                                2019.06.01: ehcache won't work with reuseForks=true!
                                            net.sf.ehcache.CacheException: Another CacheManager with
                                            same name 'in-memory' already exists in the same VM.
                            -->
                            <reuseForks>true</reuseForks>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <junit4.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmProdJdbcDbConfig.class
                </junit4.storage-impl-hbm.groups>
                <junit4.photos.groups>
                    image.photostests.junit4.testconfig.PhotosProdJdbcDbConfig.class
                </junit4.photos.groups>
                <junit5.storage-impl-hbm.groups>
                    image.hbm.repository.springconfig.HbmProdJdbcDbConfig,
                    junit5&amp;hbm&amp;production
                </junit5.storage-impl-hbm.groups>
                <junit5.storage-jpa2x-hbm-impl.groups>
                    junit5&amp;jpa2x&amp;production
                </junit5.storage-jpa2x-hbm-impl.groups>
                <junit5.photos.groups>
                    image.photostests.junit4.testconfig.PhotosProdJdbcDbConfig,
                    junit5&amp;photos&amp;production
                </junit5.photos.groups>
                <junit5.webapp.groups>
                    root&amp;junit5&amp;production,
                    webapp&amp;junit5&amp;production
                </junit5.webapp.groups>
            </properties>
        </profile>
    </profiles>

    <modules>
        <module>util</module>
        <!-- cdm = common data model -->
        <module>cdm</module>
        <module>storage-entities</module>
        <module>exifweb-messaging</module>
        <!--module>storage-api</module>-->
        <!--module>storage-impl-hbm</module>-->
        <module>storage-jpa2x-hbm-impl</module>
        <!-- photos = business logic -->
        <module>photos</module>
        <module>webapp</module>
    </modules>
</project>
