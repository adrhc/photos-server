<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>image</groupId>
        <artifactId>exifweb</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <groupId>image.exifweb</groupId>
    <artifactId>webapp</artifactId>
    <packaging>war</packaging>
    <name>webapp</name>
    <url>http://maven.apache.org</url>

    <dependencies>
        <!--<dependency>-->
        <!--<groupId>org.springframework</groupId>-->
        <!--<artifactId>spring-instrument-tomcat</artifactId>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <dependency>
            <groupId>image.exifweb</groupId>
            <artifactId>photos</artifactId>
        </dependency>

        <dependency>
            <groupId>subtitles</groupId>
            <artifactId>subtitles-extractor</artifactId>
        </dependency>

        <!--
            check dependency.txt:
                exifweb:storage-jpa2x-hbm-impl:test-jar:tests:1.0-SNAPSHOT:test
        -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
        </dependency>

        <dependency>
            <groupId>com.jolbox</groupId>
            <artifactId>bonecp</artifactId>
            <scope>${run-jetty}</scope>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>

        <!--
        	ERROR (at compilation when missing aspectjrt):
        		couldn't find aspectjrt.jar on classpath, checked ...
        -->
        <!--<dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>-->

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <!--
            jackson-datatype-hibernate4 depends on:
                jackson-core -> jackson-databind -> jackson-annotations
            version determined by jackson-datatype-hibernate4.version

            see mvn dependency:tree | grep -B3 jackson
        -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-hibernate5</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-aspects</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>

        <!--
            copy to tomcat/lib for java > 8 with modules

	        when NOT using modules but using java 10:
	        - this mvn dependency must be enabled
	        - need in setenv.sh: JAVA_MODULES="-add-modules java.xml.bind"
	        - jaxb-api and jaxb-runtime need not to be copied into tomcat/lib
        -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
        </dependency>
        <!--dependency>
	        <groupId>org.glassfish.jaxb</groupId>
        	<artifactId>jaxb-runtime</artifactId>
        </dependency-->

        <dependency>
            <groupId>image.exifweb</groupId>
            <artifactId>util</artifactId>
        </dependency>

        <dependency>
            <groupId>image.exifweb</groupId>
            <artifactId>util</artifactId>
            <classifier>tests</classifier>
            <scope>test</scope>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>image.exifweb</groupId>
            <artifactId>storage-entities</artifactId>
            <classifier>tests</classifier>
            <scope>test</scope>
            <version>${project.version}</version>
        </dependency>

        <!--
            disabled till solving:
                https://issues.apache.org/jira/browse/SUREFIRE-1534
                ClassNotFoundException: org.apache.maven.plugin.surefire.StartupReportConfiguration
        -->
        <dependency>
            <groupId>image.exifweb</groupId>
            <artifactId>storage-jpa2x-hbm-impl</artifactId>
            <classifier>tests</classifier>
            <scope>test</scope>
            <!--
                needs version because including jar also
                solves ERROR: The POM for exifweb:photos:jar:1.0-SNAPSHOT is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
            -->
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>image.exifweb</groupId>
            <artifactId>photos</artifactId>
            <classifier>tests</classifier>
            <scope>test</scope>
            <version>${project.version}</version>
        </dependency>

        <!--
                &lt;!&ndash;
                    ERROR
                        Absent Code attribute in method that is not native or abstract in class file javax/persistence/GenerationType
                    SOLUTION
                        Let this dependency the last!

                    see https://stackoverflow.com/questions/8483419/jpa-classformat-error-absent-code-attribute-in-method-that-is-not-native-or-abs
                &ndash;&gt;
                <dependency>
                    <groupId>javax</groupId>
                    <artifactId>javaee-api</artifactId>
                    <scope>provided</scope>
                </dependency>
        -->

        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <profiles>
        <profile>
            <id>java11</id>
            <activation>
                <jdk>11</jdk>
            </activation>
            <dependencies>
                <!--
                    required by java 11

                    https://stackoverflow.com/questions/52913597/springboot-org-hibernate-mappingexception-could-not-get-constructor-for-org-hi
                    https://medium.com/criciumadev/its-time-migrating-to-java-11-5eb3868354f9
                -->
                <dependency>
                    <groupId>org.javassist</groupId>
                    <artifactId>javassist</artifactId>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <build>
        <defaultGoal>install</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
            </plugin>

            <!--
                http://tomcat.apache.org/maven-plugin-2.2/
            -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <configuration>
                    <url>http://192.168.1.31:8080/manager</url>
                    <server>TomcatServer</server>
                    <path>/${project.build.finalName}</path>
                </configuration>
            </plugin>

            <!--
                ERROR
                    EnhancementException: Unable to enhance persistent attribute [image.exifweb.systemtem.persistence.entities.Album:cover]
                    Caused by: javassist.NotFoundException: image.exifweb.systemtem.persistence.entities.Image
                PROBLEM?
                    Album depends on Image which depends on Album

                https://docs.jboss.org/hibernate/orm/5.0/topical/html/bytecode/BytecodeEnhancement.html#_build_time_enhancement

                https://vladmihalcea.com/how-to-enable-bytecode-enhancement-dirty-checking-in-hibernate/
                While the unidirectional @OneToOne association can be fetched lazily, the parent-side of a bidirectional @OneToOne association is not. Even when specifying that the association is not optional and we have the FetchType.LAZY, the parent-side association behaves like a FetchType.EAGER relationship.
            -->
            <!--<plugin>-->
            <!--<groupId>org.hibernate.orm.tooling</groupId>-->
            <!--<artifactId>hibernate-enhance-maven-plugin</artifactId>-->
            <!--<dependencies>-->
            <!--&lt;!&ndash;-->
            <!--version determined by jackson-datatype-hibernate4.version-->

            <!--see mvn dependency:tree | grep -B3 jackson-->
            <!--&ndash;&gt;-->
            <!--<dependency>-->
            <!--<groupId>com.fasterxml.jackson.core</groupId>-->
            <!--<artifactId>jackson-annotations</artifactId>-->
            <!--</dependency>-->
            <!--</dependencies>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<configuration>-->
            <!--&lt;!&ndash;<dir>${project.build.outputDirectory}</dir>&ndash;&gt;-->
            <!--<failOnError>true</failOnError>-->
            <!--<enableLazyInitialization>true</enableLazyInitialization>-->
            <!--<enableDirtyTracking>true</enableDirtyTracking>-->
            <!--<enableAssociationManagement>true</enableAssociationManagement>-->
            <!--<enableExtendedEnhancement>false</enableExtendedEnhancement>-->
            <!--</configuration>-->
            <!--<goals>-->
            <!--<goal>enhance</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--</plugin>-->

            <!--
                order matters: put this after hibernate-enhance-maven-plugin

                https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
                multiple goals bound to a phase are executed in the same order as they are declared in the POM
            -->
            <!--<plugin>-->
            <!--<groupId>org.codehaus.mojo</groupId>-->
            <!--<artifactId>aspectj-maven-plugin</artifactId>-->
            <!--<configuration combine.self="append">-->
            <!--<aspectLibraries>-->
            <!--<aspectLibrary>-->
            <!--<groupId>org.springframework</groupId>-->
            <!--<artifactId>spring-aspects</artifactId>-->
            <!--</aspectLibrary>-->
            <!--<aspectLibrary>-->
            <!--<groupId>org.springframework.security</groupId>-->
            <!--<artifactId>spring-security-aspects</artifactId>-->
            <!--</aspectLibrary>-->
            <!--</aspectLibraries>-->
            <!--</configuration>-->
            <!--</plugin>-->

            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <groups>${junit5.webapp.groups}</groups>
                    <!--<properties>-->
                    <!--<includeTags>MiscTestCategory</includeTags>-->
                    <!--<includeTags>image.photos.JsonMapperConfig</includeTags>-->
                    <!--<includeTags>image.photos.springconfigtosInMemoryDbConfig</includeTags>-->
                    <!--<includeTags>junit5&amp;photos&amp;inmemorydb</includeTags>-->
                    <!--<includeTags>junit5&amp;photos&amp;json</includeTags>-->
                    <!--<includeTags>junit5&amp;photos&amp;misc</includeTags>-->
                    <!--</properties>-->
                    <!--
                        2020.01.24, reuseForks = true
                        
                        image.exifwebtests.apache.ApacheService4Test

                        Caused by: net.sf.ehcache.CacheException: Another CacheManager with same name 'in-memory' already exists in the same VM. Please provide unique names for each CacheManager in the config or do one of following:
                        1. Use one of the CacheManager.create() static factory methods to reuse same CacheManager with same name or create one if necessary
                        2. Shutdown the earlier cacheManager before creating new one with same name.
                        The source of the existing CacheManager is: URLConfigurationSource [url=jar:file:/home/adr/.m2/repository/image/exifweb/storage-impl-hbm/1.0-SNAPSHOT/storage-impl-hbm-1.0-SNAPSHOT.jar!/ehcache/ehcache-in-memory.xml]
                            at net.sf.ehcache.CacheManager.assertNoCacheManagerExistsWithSameName(CacheManager.java:631)
                            at net.sf.ehcache.CacheManager.init(CacheManager.java:395)
                            at net.sf.ehcache.CacheManager.<init>(CacheManager.java:269)
                            at org.hibernate.cache.ehcache.internal.EhcacheRegionFactory.useNormalCacheManager(EhcacheRegionFactory.java:248)
                            ... 95 more
                    -->
                    <reuseForks>false</reuseForks>
                </configuration>
            </plugin>

        </plugins>
        <finalName>exifweb</finalName>
    </build>
</project>
